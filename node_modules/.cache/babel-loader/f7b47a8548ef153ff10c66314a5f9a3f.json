{"ast":null,"code":"import _classCallCheck from \"/Users/jiahaoyu/Desktop/streamy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jiahaoyu/Desktop/streamy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jiahaoyu/Desktop/streamy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jiahaoyu/Desktop/streamy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jiahaoyu/Desktop/streamy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jiahaoyu/Desktop/streamy/src/components/streams/streamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nvar streamCreate =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(streamCreate, _React$Component);\n\n  function streamCreate() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, streamCreate);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(streamCreate)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderInput = function (_ref) {\n      var input = _ref.input,\n          label = _ref.label,\n          meta = _ref.meta;\n      var classname = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: classname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), _this.renderError(meta));\n    };\n\n    _this.onSubmit = function (formValues) {\n      console.log(formValues);\n\n      _this.props.createStream(formValues);\n    };\n\n    return _this;\n  }\n\n  _createClass(streamCreate, [{\n    key: \"renderError\",\n    value: function renderError(_ref2) {\n      var error = _ref2.error,\n          touched = _ref2.touched;\n\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, error));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n      return React.createElement(\"form\", {\n        className: \"ui form\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Submit\"));\n    }\n  }]);\n\n  return streamCreate;\n}(React.Component);\n\nvar validate = function validate(formValues) {\n  var errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must input a title.';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must input a description.';\n  }\n\n  return errors;\n};\n\nvar formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate: validate\n})(streamCreate);\nexport default connect(null, {\n  createStream: createStream\n})(formWrapped);","map":{"version":3,"sources":["/Users/jiahaoyu/Desktop/streamy/src/components/streams/streamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","streamCreate","renderInput","input","label","meta","classname","error","touched","renderError","onSubmit","formValues","console","log","props","handleSubmit","Component","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions'\n\nclass streamCreate extends React.Component {\n\n  renderError({error, touched}) {\n    if(touched && error) {\n      return (\n        <div className='ui error message'>\n          <div className='header'>{error}</div>\n        </div>\n      )\n    }\n  }\n\n  renderInput = ({ input, label, meta }) => {\n    const classname = `field ${meta.error && meta.touched ? 'error' : ''}`\n    return (\n      <div className={classname}>\n        <label>{label}</label>\n        <input {...input} autoComplete='off' />\n        {this.renderError(meta)}\n      </div>\n    );\n  }\n  \n  onSubmit = (formValues) => {\n    console.log(formValues);\n    this.props.createStream(formValues)\n  }\n\n  render() {\n      console.log(this.props)\n    return (\n      <form className='ui form' onSubmit={this.props.handleSubmit(this.onSubmit)}>\n        <Field name=\"title\" component={this.renderInput} label=\"Title\" />\n        <Field\n          name=\"description\"\n          component={this.renderInput}\n          label=\"Description\"\n        />\n        <button className='ui button primary'>Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validate = (formValues) => {\n  const errors = {};\n  if(!formValues.title) {\n    errors.title = 'You must input a title.'\n  }\n  if(!formValues.description) {\n    errors.description = 'You must input a description.'\n  }\n  return errors;\n}\n\nconst formWrapped =  reduxForm({\n  form: \"streamCreate\",\n  validate\n})(streamCreate);\n\nexport default connect (null, { createStream } )(formWrapped);\n"]},"metadata":{},"sourceType":"module"}